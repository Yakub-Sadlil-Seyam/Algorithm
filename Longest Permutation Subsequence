#include<stdio.h>
#include<iostream>
#include<map>
using namespace std;

    int lps(int arr[],int n)
    {
        map<int, int> m;
        for(int i = 1; i <= n; i++)
        {
            m[arr[i]]++;
        }
        int length = 0;
        for(int i = 1; i <= n; i++)
        {
            if(m[i] == 0) break;
            length++;
        }
        return length;
    }

    int main()
    {
            cout<<"enter the size of array"<<endl;
            int n; cin>>n;
            cout<<"enter the array elements"<<endl;
            int arr[n+2] = {};
            for(int i = 1; i <= n; i++) cin>>arr[i];
            cout<<lps(arr,n);
    }

    /* https://www.geeksforgeeks.org/longest-permutation-subsequence-in-a-given-array/?ref=rp

    Approach: The above-mentioned problem is on permutation subsequence so the order of the array elements is irrelevant,
    only what matter is the frequency of each element. If array is of length N then the maximum possible length for the
    permutation sequence is N and minimum possible length is 0. If the subsequence of length L is a valid permutation
    then all elements from 1 to L should be present.

Count the frequency of the elements in the range [1, N] from the array
Iterate through all elements from 1 to N in the array and count the iterations till a 0 frequency is observed.
If the frequency of an element is ‘0’, return the current count of iterations as the required length. */
